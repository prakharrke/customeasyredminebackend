{"version":3,"sources":["Constants.js","logo.svg","Scenes/LoginForm.js","Scenes/Home.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["exports","url","module","__webpack_require__","p","LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","password","event","axios","defaults","withCredentials","crossDomain","post","Constants","concat","JSON","stringify","headers","then","response","console","log","setState","target","value","react_default","a","createElement","className","style","height","main","name","width","label","pattern","minLength","required","onChange","setUserName","bind","type","setPassword","onClick","login","Component","Home","PrivateRoute","_ref","component","rest","objectWithoutProperties","Route","assign","render","isAuthenticated","Redirect","to","pathname","Routes","data","_this2","HashRouter","basename","Switch","path","LoginForm_LoginForm","isUserAuthenticated","Routes_PrivateRoute","App","window","location","hostname","Routes_Routes","Boolean","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f223958b.chunk.js","sourcesContent":["exports.url = '';","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Input } from '@progress/kendo-react-inputs';\r\nimport { Redirect } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport * as Constants from '../Constants'\r\nexport default class LoginForm extends Component {\r\n\tconstructor(props) {\r\n\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tusername: '',\r\n\t\t\tpassword: ''\r\n\t\t}\r\n\t}\r\n\r\n\tlogin(event) {\r\n\t\taxios.defaults.withCredentials = true;\r\n\t\taxios.defaults.crossDomain = true;\r\n\t\taxios.post(Constants.url + 'Authentication', `userDetails=${JSON.stringify({ username: this.state.username, password: this.state.password })}`, {\r\n\t\t\tcrossDomain : true,\r\n\t\t\twithCredentials : true,\r\n\t\t\theaders: {\r\n\t\t\t\t\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t}).then(response => {\r\n\t\t\tconsole.log(response)\r\n\t\t})\r\n\t}\r\n\tsetUserName(event) {\r\n\t\tthis.setState({\r\n\t\t\tusername: event.target.value\r\n\t\t})\r\n\t}\r\n\tsetPassword(event) {\r\n\t\tthis.setState({\r\n\t\t\tpassword: event.target.value\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\t//var redirect = this.props.isUserAuthenticated ? <Redirect to={{ pathname: \"/connections\" }} /> : ''\r\n\t\t\r\n\t\treturn (\r\n\r\n\r\n\t\t\t<div className=\"row justify-content-center align-items-center\" style={{ height: \"40em\" }}>\r\n\t\t\t\t\r\n\t\t\t\t<div className=\"col-lg-4 align-items-center\">\r\n\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t<div className=\"card-block\">\r\n\t\t\t\t\t\t\t<form className=\"k-form\">\r\n\t\t\t\t\t\t\t\t<fieldset>\r\n\t\t\t\t\t\t\t\t\t<legend>Login:</legend>\r\n\t\t\t\t\t\t\t\t\t<div className=\"mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"username\"\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\r\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"username\"\r\n\t\t\t\t\t\t\t\t\t\t\tpattern={\"[A-Za-z]+\"}\r\n\t\t\t\t\t\t\t\t\t\t\tminLength={2}\r\n\t\t\t\t\t\t\t\t\t\t\trequired={true}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={this.setUserName.bind(this)}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\t\t\t\t\trequired={true}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={this.setPassword.bind(this)}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</fieldset>\r\n\t\t\t\t\t\t\t\t<input type=\"button\" className=\"k-button k-primary\" value=\"Login\" onClick={this.login.bind(this)} />\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Home extends Component{\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<h4>Home</h4>\r\n\t\t\t)\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Router, HashRouter, Redirect, Switch } from 'react-router-dom';\r\nimport LoginForm from './Scenes/LoginForm'\r\nimport axios from 'axios';\r\nimport * as Constants from './Constants'\r\nimport Home from './Scenes/Home'\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n\r\n\tconsole.log(rest)\r\n\r\n\treturn (\r\n\t\t<Route  {...rest} render={props => (\r\n\r\n\t\t\trest.isAuthenticated ? (\r\n\t\t\t\t<Component {...props} />\r\n\t\t\t) : (\r\n\t\t\t\t\t<Redirect to={{\r\n\t\t\t\t\t\tpathname: \"/login\",\r\n\r\n\t\t\t\t\t}} />\r\n\t\t\t\t)\r\n\t\t)} />);\r\n}\r\n\r\n\r\nexport default class Routes extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\r\n\t\t\tisAuthenticated : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillMount(){\r\n\t\taxios.post(Constants.url + 'Authentication', `userDetails=${JSON.stringify({ username: \"\", password:\"\" })}`, {\r\n\t\t\theaders: {\r\n\t\t\t}\r\n\r\n\r\n\t\t}).then(response=>{\r\n\t\t\tconsole.log(response.data);\r\n\r\n\t\t})\r\n\t}\r\n\r\n\t\trender() {\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<HashRouter basename=\"/customeasyredmine\" >\r\n\r\n\t\t\t\t<Switch>\r\n\t\t\t\t<Route  path='/login' render={props=>{return (<LoginForm isUserAuthenticated={this.state.isUserAuthenticated} />)}} />\r\n\t\t\t\t<PrivateRoute isAuthenticated={this.state.isUserAuthenticated} path='/' component = {Home}/>\r\n\t\t\t\t</Switch>\r\n\t\t\t</HashRouter>\r\n\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as Constants from './Constants'\nimport './css/bootstrap.min.css'\nimport './css/bootstrap.css'\nimport './css/matall.css';\nimport './css/transition.css'\nimport Routes from './Routes'\nclass App extends Component {\n  componentWillMount(){\n\n    Constants.url = 'http://localhost:' + '7070' + '/customeasyredmine/'\n    //Constants.url = window.location.protocol + \"//\" + window.location.hostname + \":\" + window.location.port + '/PVPUI/'\n    console.log(\"LOCATION PORT \" + Constants.url)\n    console.log(\"LOCATION PORT \" + window.location.hostname)\n  }\n  render() {\n    return (\n       <div className=\"App stylesContainer\">\n        \n        <Routes />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}